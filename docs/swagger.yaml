basePath: /api/v1
definitions:
  model.IncludeSessionString:
    properties:
      session:
        type: string
    type: object
  model.NovelMetadata:
    properties:
      description:
        type: string
      image:
        type: string
      language:
        type: string
      status:
        $ref: '#/definitions/model.NovelStatusID'
      tagline:
        type: string
      title:
        type: string
      visibility:
        $ref: '#/definitions/model.VisibilityID'
    type: object
  model.NovelMetadataSmall:
    properties:
      adult:
        type: boolean
      author:
        $ref: '#/definitions/model.UserMetadataSmall'
      description:
        type: string
      id:
        type: string
      image:
        type: string
      language:
        type: string
      rateCount:
        type: integer
      status:
        type: string
      tagline:
        type: string
      title:
        type: string
      totalRating:
        type: integer
      views:
        type: integer
      visibility:
        type: string
    type: object
  model.NovelStatusID:
    enum:
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - StatusOngoing
    - StatusCompleted
    - StatusDropped
  model.NovelView:
    properties:
      adult:
        type: boolean
      author:
        $ref: '#/definitions/model.UserMetadataSmall'
      clicks:
        type: integer
      createAt:
        type: string
      description:
        type: string
      followCount:
        type: integer
      id:
        type: string
      image:
        type: string
      language:
        type: string
      rateCount:
        type: integer
      status:
        type: string
      tagline:
        type: string
      tags:
        items:
          $ref: '#/definitions/model.TagView'
        type: array
      title:
        type: string
      totalRating:
        type: integer
      updateAt:
        type: string
      views:
        type: integer
      visibility:
        type: string
      volumes:
        type: integer
    type: object
  model.OrderBy:
    enum:
    - created_at
    - updated_at
    - views
    - title
    type: string
    x-enum-varnames:
    - OrderByCreatedAt
    - OrderByUpdateAt
    - OrderByViews
    - OrderByTitle
  model.SessionInfo:
    properties:
      expired_at:
        type: string
      session:
        type: string
    type: object
  model.SortOrder:
    enum:
    - ASC
    - DESC
    type: string
    x-enum-varnames:
    - SortOrderAsc
    - SortOrderDesc
  model.TagView:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.UserMetadata:
    properties:
      displayname:
        type: string
      email:
        type: string
      image:
        type: string
      username:
        type: string
    type: object
  model.UserMetadataSmall:
    properties:
      displayName:
        type: string
      id:
        type: string
      image:
        type: string
      username:
        type: string
    type: object
  model.UserView:
    properties:
      created_at:
        type: string
      displayName:
        type: string
      followCount:
        type: integer
      followedCount:
        type: integer
      id:
        type: string
      image:
        type: string
      novelCount:
        type: integer
      username:
        type: string
    type: object
  model.VisibilityID:
    enum:
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - VisibilityPrivate
    - VisibilityPublic
  route.ErrorCode:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    type: integer
    x-enum-varnames:
    - BadInput
    - UserNotFound
    - WrongPassword
    - BadPassword
    - BadUsername
    - BadDeviceName
    - BadDisplayname
    - BadEmail
    - UserAlreadyExists
    - InvalidLanguageFormat
    - TitleTooLong
    - TaglineTooLong
    - DescriptionTooLong
  route.ErrorJSON:
    properties:
      code:
        $ref: '#/definitions/route.ErrorCode'
      message:
        type: string
    type: object
  route.authCredentials:
    properties:
      deviceName:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  route.changePasswordCredential:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    type: object
  route.createNovelResult:
    properties:
      novel_id:
        type: string
    type: object
  route.requiredCredential:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  title: Light novel API
  version: "1.0"
paths:
  /accounts/:username:
    get:
      parameters:
      - description: UserId
        in: path
        name: userID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserView'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get user's metadata
      tags:
      - accounts
  /accounts/changepassword:
    post:
      consumes:
      - application/json
      description: 'Possible error: BadInput, BadPassword, WrongPassword'
      parameters:
      - description: Old and new password
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/route.changePasswordCredential'
      - description: User's session
        in: body
        name: sessionString
        required: true
        schema:
          $ref: '#/definitions/model.IncludeSessionString'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/route.ErrorJSON'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Change user's password
      tags:
      - accounts
  /accounts/delete:
    delete:
      consumes:
      - application/json
      deprecated: true
      description: 'Possible error: BadInput, BadPassword, BadUsername, UserNotFound'
      parameters:
      - description: User credentials
        in: body
        name: userCredential
        required: true
        schema:
          $ref: '#/definitions/route.requiredCredential'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/route.ErrorJSON'
        "500":
          description: Internal Server Error
      summary: Delete user's account and all other data
      tags:
      - accounts
  /accounts/followed/novels:
    post:
      consumes:
      - application/json
      parameters:
      - description: User's Session
        in: body
        name: sessionString
        required: true
        schema:
          $ref: '#/definitions/model.IncludeSessionString'
      - in: query
        name: adult
        type: boolean
      - in: query
        name: fromDate
        type: string
      - in: query
        name: language
        type: string
      - enum:
        - created_at
        - updated_at
        - views
        - title
        in: query
        name: orderBy
        type: string
        x-enum-varnames:
        - OrderByCreatedAt
        - OrderByUpdateAt
        - OrderByViews
        - OrderByTitle
      - in: query
        name: page
        type: integer
      - in: query
        name: search
        type: string
      - enum:
        - ASC
        - DESC
        in: query
        name: sortOrder
        type: string
        x-enum-varnames:
        - SortOrderAsc
        - SortOrderDesc
      - enum:
        - 1
        - 2
        - 3
        in: query
        name: status
        type: integer
        x-enum-varnames:
        - StatusOngoing
        - StatusCompleted
        - StatusDropped
      - collectionFormat: csv
        in: query
        items:
          type: integer
        name: tag
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: integer
        name: tagExclude
        type: array
      - in: query
        name: toDate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.NovelMetadataSmall'
            type: array
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get user's followed novels
      tags:
      - accounts
  /accounts/followed/users:
    post:
      consumes:
      - application/json
      parameters:
      - description: User's Session
        in: body
        name: sessionString
        required: true
        schema:
          $ref: '#/definitions/model.IncludeSessionString'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserMetadataSmall'
            type: array
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get user's followed users
      tags:
      - accounts
  /accounts/login:
    post:
      consumes:
      - application/json
      description: 'The session token should be renewed a week before expires, possible
        error: WrongPassword, UserNotFound, BadInput, BadPassword, BadUsername, BadDeviceName'
      parameters:
      - description: User credentials
        in: body
        name: userCredential
        required: true
        schema:
          $ref: '#/definitions/route.authCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SessionInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/route.ErrorJSON'
        "500":
          description: Internal Server Error
      summary: Log the user in, return a new user session
      tags:
      - accounts
  /accounts/logout:
    post:
      consumes:
      - application/json
      parameters:
      - description: User credentials
        in: body
        name: sessionString
        required: true
        schema:
          $ref: '#/definitions/model.IncludeSessionString'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Log the user out
      tags:
      - accounts
  /accounts/register:
    post:
      consumes:
      - application/json
      description: 'Possible error: BadInput, BadPassword, BadUsername, BadDeviceName,
        UserAlreadyExists'
      parameters:
      - description: User credentials
        in: body
        name: userCredential
        required: true
        schema:
          $ref: '#/definitions/route.authCredentials'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.SessionInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/route.ErrorJSON'
        "500":
          description: Internal Server Error
      summary: Register the user, return a new user session
      tags:
      - accounts
  /accounts/renew:
    post:
      consumes:
      - application/json
      parameters:
      - description: User credentials
        in: body
        name: sessionString
        required: true
        schema:
          $ref: '#/definitions/model.IncludeSessionString'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SessionInfo'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Renew the session token, the token should be renewed a week before
        expires
      tags:
      - accounts
  /accounts/self:
    post:
      consumes:
      - application/json
      parameters:
      - description: User's Session
        in: body
        name: sessionString
        required: true
        schema:
          $ref: '#/definitions/model.IncludeSessionString'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserView'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get user's metadata from session
      tags:
      - accounts
  /accounts/update:
    patch:
      consumes:
      - application/json
      description: 'Possible error: BadInput, BadUsername, BadDisplayname, BadEmail,
        UserAlreadyExists'
      parameters:
      - description: User credentials
        in: body
        name: sessionString
        required: true
        schema:
          $ref: '#/definitions/model.IncludeSessionString'
      - description: User metadata
        in: body
        name: metadata
        required: true
        schema:
          $ref: '#/definitions/model.UserMetadata'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/route.ErrorJSON'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Update user's metadata
      tags:
      - accounts
  /novel/:novelID:
    delete:
      deprecated: true
      parameters:
      - description: Novel ID
        in: path
        name: NovelID
        required: true
        type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete the novel and all the related stuff like volumes, chapters,
        comments, images with the provided novel id
      tags:
      - novel
    patch:
      consumes:
      - application/json
      description: 'Possible error code: MissingField, InvalidLanguageFormat, TitleTooLong,
        TaglineTooLong'
      parameters:
      - description: Novel ID
        in: path
        name: NovelID
        required: true
        type: string
      - description: Novel details
        in: body
        name: NovelDetails
        required: true
        schema:
          $ref: '#/definitions/model.NovelMetadata'
      - description: User's Session
        in: body
        name: sessionString
        required: true
        schema:
          $ref: '#/definitions/model.IncludeSessionString'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/route.ErrorJSON'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Update the novel metadata with the provided metadata
      tags:
      - novel
    post:
      description: If the novel is private, the user need to be logged in with the
        author account
      parameters:
      - description: Novel ID
        in: path
        name: NovelID
        required: true
        type: string
      - description: User's Session
        in: body
        name: sessionString
        schema:
          $ref: '#/definitions/model.IncludeSessionString'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NovelView'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get the novel with provided novel id
      tags:
      - novel
  /novel/create:
    post:
      consumes:
      - application/json
      description: 'Possible error code: MissingField, InvalidLanguageFormat, TitleTooLong,
        TaglineTooLong'
      parameters:
      - description: Novel details
        in: body
        name: NovelDetails
        required: true
        schema:
          $ref: '#/definitions/model.NovelMetadata'
      - description: User's Session
        in: body
        name: sessionString
        required: true
        schema:
          $ref: '#/definitions/model.IncludeSessionString'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/route.createNovelResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/route.ErrorJSON'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Create a new novel with the provided metadata, return the created novel
        id
      tags:
      - novel
  /novel/from/:username:
    post:
      description: If the user is not logged in, only the public novels will be returned
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: User's Session
        in: body
        name: sessionString
        required: true
        schema:
          $ref: '#/definitions/model.IncludeSessionString'
      - in: query
        name: adult
        type: boolean
      - in: query
        name: fromDate
        type: string
      - in: query
        name: language
        type: string
      - enum:
        - created_at
        - updated_at
        - views
        - title
        in: query
        name: orderBy
        type: string
        x-enum-varnames:
        - OrderByCreatedAt
        - OrderByUpdateAt
        - OrderByViews
        - OrderByTitle
      - in: query
        name: page
        type: integer
      - in: query
        name: search
        type: string
      - enum:
        - ASC
        - DESC
        in: query
        name: sortOrder
        type: string
        x-enum-varnames:
        - SortOrderAsc
        - SortOrderDesc
      - enum:
        - 1
        - 2
        - 3
        in: query
        name: status
        type: integer
        x-enum-varnames:
        - StatusOngoing
        - StatusCompleted
        - StatusDropped
      - collectionFormat: csv
        in: query
        items:
          type: integer
        name: tag
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: integer
        name: tagExclude
        type: array
      - in: query
        name: toDate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.NovelMetadataSmall'
            type: array
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get all the novels from the user with the provided user id
      tags:
      - novel
swagger: "2.0"
