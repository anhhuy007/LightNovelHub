{
    "swagger": "2.0",
    "info": {
        "title": "Light novel API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/accounts/:username": {
            "get": {
                "tags": [
                    "accounts"
                ],
                "summary": "Get user's metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserView"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/accounts/changepassword": {
            "post": {
                "description": "Possible error: BadInput, BadPassword, WrongPassword",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Change user's password",
                "parameters": [
                    {
                        "description": "Old and new password",
                        "name": "credential",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/route.changePasswordCredential"
                        }
                    },
                    {
                        "description": "User's session",
                        "name": "sessionString",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IncludeSessionString"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorJSON"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/accounts/delete": {
            "delete": {
                "description": "Possible error: BadInput, BadPassword, BadUsername, UserNotFound",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Delete user's account and all other data",
                "deprecated": true,
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "userCredential",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/route.requiredCredential"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/accounts/find/:username": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Search user by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.UserMetadataSmall"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/accounts/followed/novels": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get user's followed novels",
                "parameters": [
                    {
                        "description": "User's Session",
                        "name": "sessionString",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IncludeSessionString"
                        }
                    },
                    {
                        "type": "boolean",
                        "name": "adult",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "fromDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "language",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "created_at",
                            "updated_at",
                            "views",
                            "title"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "OrderByCreatedAt",
                            "OrderByUpdateAt",
                            "OrderByViews",
                            "OrderByTitle"
                        ],
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "SortOrderAsc",
                            "SortOrderDesc"
                        ],
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "x-enum-varnames": [
                            "StatusOngoing",
                            "StatusCompleted",
                            "StatusDropped"
                        ],
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "name": "tagExclude",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "toDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.NovelMetadataSmall"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/accounts/followed/users": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get user's followed users",
                "parameters": [
                    {
                        "description": "User's Session",
                        "name": "sessionString",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IncludeSessionString"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.UserMetadataSmall"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/accounts/login": {
            "post": {
                "description": "The session token should be renewed a week before expires, possible error: WrongPassword, UserNotFound, BadInput, BadPassword, BadUsername, BadDeviceName",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Log the user in, return a new user session",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "userCredential",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/route.authCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SessionInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/accounts/logout": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Log the user out",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "sessionString",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IncludeSessionString"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/accounts/register": {
            "post": {
                "description": "Possible error: BadInput, BadPassword, BadUsername, BadDeviceName, UserAlreadyExists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Register the user, return a new user session",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "userCredential",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/route.authCredentials"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.SessionInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/accounts/renew": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Renew the session token, the token should be renewed a week before expires",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "sessionString",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IncludeSessionString"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SessionInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/accounts/self": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get user's metadata from session",
                "parameters": [
                    {
                        "description": "User's Session",
                        "name": "sessionString",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IncludeSessionString"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserView"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/accounts/update": {
            "patch": {
                "description": "Possible error: BadInput, BadUsername, BadDisplayname, BadEmail, UserAlreadyExists",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Update user's metadata",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "sessionString",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IncludeSessionString"
                        }
                    },
                    {
                        "description": "User metadata",
                        "name": "metadata",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserMetadata"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorJSON"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/novel/:novelID": {
            "post": {
                "description": "If the novel is private, the user need to be logged in with the author account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novel"
                ],
                "summary": "Get the novel with provided novel id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Novel ID",
                        "name": "NovelID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User's Session",
                        "name": "sessionString",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/model.IncludeSessionString"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NovelView"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "novel"
                ],
                "summary": "Delete the novel and all the related stuff like volumes, chapters, comments, images with the provided novel id",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "Novel ID",
                        "name": "NovelID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "description": "Possible error code: MissingField, InvalidLanguageFormat, TitleTooLong, TaglineTooLong",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "novel"
                ],
                "summary": "Update the novel metadata with the provided metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Novel ID",
                        "name": "NovelID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Novel details",
                        "name": "NovelDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.NovelMetadata"
                        }
                    },
                    {
                        "description": "User's Session",
                        "name": "sessionString",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IncludeSessionString"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorJSON"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/novel/create": {
            "post": {
                "description": "Possible error code: MissingField, InvalidLanguageFormat, TitleTooLong, TaglineTooLong",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novel"
                ],
                "summary": "Create a new novel with the provided metadata, return the created novel id",
                "parameters": [
                    {
                        "description": "Novel details",
                        "name": "NovelDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.NovelMetadata"
                        }
                    },
                    {
                        "description": "User's Session",
                        "name": "sessionString",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IncludeSessionString"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/route.createNovelResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorJSON"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/novel/find": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novel"
                ],
                "summary": "Search and filter novels with the provided filters and sorting options, if no filters and sorting options are provided, all the public novels will be returned",
                "parameters": [
                    {
                        "type": "boolean",
                        "name": "adult",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "fromDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "language",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "created_at",
                            "updated_at",
                            "views",
                            "title"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "OrderByCreatedAt",
                            "OrderByUpdateAt",
                            "OrderByViews",
                            "OrderByTitle"
                        ],
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "SortOrderAsc",
                            "SortOrderDesc"
                        ],
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "x-enum-varnames": [
                            "StatusOngoing",
                            "StatusCompleted",
                            "StatusDropped"
                        ],
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "name": "tagExclude",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "toDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.NovelMetadataSmall"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/novel/from/:username": {
            "post": {
                "description": "If the user is not logged in, only the public novels will be returned",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "novel"
                ],
                "summary": "Get all the novels from the user with the provided user id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User's Session",
                        "name": "sessionString",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IncludeSessionString"
                        }
                    },
                    {
                        "type": "boolean",
                        "name": "adult",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "fromDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "language",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "created_at",
                            "updated_at",
                            "views",
                            "title"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "OrderByCreatedAt",
                            "OrderByUpdateAt",
                            "OrderByViews",
                            "OrderByTitle"
                        ],
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "SortOrderAsc",
                            "SortOrderDesc"
                        ],
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "x-enum-varnames": [
                            "StatusOngoing",
                            "StatusCompleted",
                            "StatusDropped"
                        ],
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "name": "tagExclude",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "toDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.NovelMetadataSmall"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.IncludeSessionString": {
            "type": "object",
            "properties": {
                "session": {
                    "type": "string"
                }
            }
        },
        "model.NovelMetadata": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.NovelStatusID"
                },
                "tagline": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "visibility": {
                    "$ref": "#/definitions/model.VisibilityID"
                }
            }
        },
        "model.NovelMetadataSmall": {
            "type": "object",
            "properties": {
                "adult": {
                    "type": "boolean"
                },
                "author": {
                    "$ref": "#/definitions/model.UserMetadataSmall"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "rateCount": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tagline": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "totalRating": {
                    "type": "integer"
                },
                "views": {
                    "type": "integer"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "model.NovelStatusID": {
            "type": "integer",
            "enum": [
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "StatusOngoing",
                "StatusCompleted",
                "StatusDropped"
            ]
        },
        "model.NovelView": {
            "type": "object",
            "properties": {
                "adult": {
                    "type": "boolean"
                },
                "author": {
                    "$ref": "#/definitions/model.UserMetadataSmall"
                },
                "clicks": {
                    "type": "integer"
                },
                "createAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "followCount": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "rateCount": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tagline": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TagView"
                    }
                },
                "title": {
                    "type": "string"
                },
                "totalRating": {
                    "type": "integer"
                },
                "updateAt": {
                    "type": "string"
                },
                "views": {
                    "type": "integer"
                },
                "visibility": {
                    "type": "string"
                },
                "volumes": {
                    "type": "integer"
                }
            }
        },
        "model.OrderBy": {
            "type": "string",
            "enum": [
                "created_at",
                "updated_at",
                "views",
                "title"
            ],
            "x-enum-varnames": [
                "OrderByCreatedAt",
                "OrderByUpdateAt",
                "OrderByViews",
                "OrderByTitle"
            ]
        },
        "model.SessionInfo": {
            "type": "object",
            "properties": {
                "expired_at": {
                    "type": "string"
                },
                "session": {
                    "type": "string"
                }
            }
        },
        "model.SortOrder": {
            "type": "string",
            "enum": [
                "ASC",
                "DESC"
            ],
            "x-enum-varnames": [
                "SortOrderAsc",
                "SortOrderDesc"
            ]
        },
        "model.TagView": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.UserMetadata": {
            "type": "object",
            "properties": {
                "displayname": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.UserMetadataSmall": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.UserView": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "followCount": {
                    "type": "integer"
                },
                "followedCount": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "novelCount": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.VisibilityID": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "VisibilityPrivate",
                "VisibilityPublic"
            ]
        },
        "route.ErrorCode": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12
            ],
            "x-enum-varnames": [
                "BadInput",
                "UserNotFound",
                "WrongPassword",
                "BadPassword",
                "BadUsername",
                "BadDeviceName",
                "BadDisplayname",
                "BadEmail",
                "UserAlreadyExists",
                "InvalidLanguageFormat",
                "TitleTooLong",
                "TaglineTooLong",
                "DescriptionTooLong"
            ]
        },
        "route.ErrorJSON": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/route.ErrorCode"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "route.authCredentials": {
            "type": "object",
            "properties": {
                "deviceName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "route.changePasswordCredential": {
            "type": "object",
            "properties": {
                "newPassword": {
                    "type": "string"
                },
                "oldPassword": {
                    "type": "string"
                }
            }
        },
        "route.createNovelResult": {
            "type": "object",
            "properties": {
                "novel_id": {
                    "type": "string"
                }
            }
        },
        "route.requiredCredential": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}